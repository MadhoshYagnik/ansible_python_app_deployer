# Cluster creation
- ecs_cluster:
    name: "{{ new_cluster }}"
    state: present
  register: create_cluster

# Create AmazonEC2ContainerServiceforEC2Role IAM Role
- name: Create AmazonEC2ContainerServiceforEC2Role IAM Role
  iam_role:
    name: "{{ aws_iam_role_name }}"
    assume_role_policy_document: "{{ lookup('file','policy.json') }}"
    managed_policy:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
    state: present

# ELB Target Group Creation
- name: Create target group
  elb_target_group:
    name: "{{ imagename }}"
    target_type: ip
    protocol: http
    port: 80
    vpc_id: "{{ create_vpc.vpc.id }}"
    state: present
    health_check_path: /
    successful_response_codes: "200"
    target_type: ip
  register: create_elb_target_group

  
# ELB Creation
- name: Create elb
  elb_application_lb:
    name: "{{ imagename }}"
    security_groups:
      - "{{imagename}}_elb_security_group"
    subnets:
      - "{{ create_subnet1.subnet.id }}"
      - "{{ create_subnet2.subnet.id }}"
    listeners:
      - Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupName: "{{ imagename }}"
    state: present
  register: create_elb


# Task definition creation
- name: Create task definition
  ecs_taskdefinition:
    containers:
    - name: "{{ imagename }}"
      essential: true
      image: "{{ ec_repo.repository.repositoryUri }}:{{ imageversion }}"
      portMappings:
      - containerPort: 80
        hostPort: 80
    launch_type: FARGATE
    cpu: 256
    memory: 512
    network_mode: awsvpc
    execution_role_arn: arn:aws:iam::702551018836:role/ecsExternalInstanceRole
    family: "{{ imagename }}_task"
    state: present

# Service Creation
- name: Create ecs service
  ecs_service:
    name: "{{ imagename }}_service"
    state: present
    cluster: "{{ new_cluster }}"
    launch_type: FARGATE
    task_definition: "{{ imagename }}_task"
    network_configuration:
      subnets:
      - "{{ create_subnet1.subnet.id }}"
      - "{{ create_subnet2.subnet.id }}"
      security_groups:
      - sg-0eac2e09008f71cb2
      assign_public_ip: yes
    load_balancers:
      - targetGroupArn: "{{ create_elb_target_group.target_group_arn }}"
        containerName: "{{ imagename }}"
        containerPort: 80
    desired_count: 3

# Show url to user
- debug:
    msg: "The deploy is over. You can access through the url : http://test-lb-tf-1120149482.ap-south-1.elb.amazonaws.com"
